// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: message.proto

package messagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagerClient is the client API for Messager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagerClient interface {
	GetMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type messagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagerClient(cc grpc.ClientConnInterface) MessagerClient {
	return &messagerClient{cc}
}

func (c *messagerClient) GetMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/testMessage.Messager/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagerServer is the server API for Messager service.
// All implementations must embed UnimplementedMessagerServer
// for forward compatibility
type MessagerServer interface {
	GetMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	mustEmbedUnimplementedMessagerServer()
}

// UnimplementedMessagerServer must be embedded to have forward compatible implementations.
type UnimplementedMessagerServer struct {
}

func (UnimplementedMessagerServer) GetMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessagerServer) mustEmbedUnimplementedMessagerServer() {}

// UnsafeMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagerServer will
// result in compilation errors.
type UnsafeMessagerServer interface {
	mustEmbedUnimplementedMessagerServer()
}

func RegisterMessagerServer(s grpc.ServiceRegistrar, srv MessagerServer) {
	s.RegisterService(&Messager_ServiceDesc, srv)
}

func _Messager_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testMessage.Messager/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).GetMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Messager_ServiceDesc is the grpc.ServiceDesc for Messager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testMessage.Messager",
	HandlerType: (*MessagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _Messager_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
